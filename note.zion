import json {JsonReader, from_json, JObject, JText, J}
export {Note}


struct Note {
  timestamp    String
  message      String
  category     String
  id           String
  installation String
}

instance Str Note {
  fn str(note) {
    let Note(timestamp, message, category, id, installation) = note
    return "${timestamp}: [${category}] ${message}"
  }
}

instance JsonReader Note {
  fn from_json(json J) Maybe Note {
    if json is JObject(map) {
      if (map["timestamp"],
          map["message"],
          map["category"],
          map["id"],
          map["installation"]) is
          (Just(JText(timestamp)),
           Just(JText(message)),
           Just(JText(category)),
           Just(JText(id)),
           Just(JText(installation))) {
        return Just(Note(timestamp, message, category, id, installation))
      }
    }
    return Nothing
  }
}

instance JsonReader a {
  fn from_json(json J) Maybe a {
    IF a IS struct {
      if json is JObject(map) {
        if TUPLE(map[STR(NAME(dim))] FOR dim IN a) is
        TUPLE(Just(JCTOR_FROM_TYPE(TYPE(dim))(NAME(dim))) FOR dim IN a) {
          return Just(CTOR(a)(NAME(dim) FOR dim in a)
        }
      }
      return Nothing
    } ELSE IF a is data {
    }
    if json is JObject(map) {
      if (map["timestamp"],
          map["message"],
          map["category"],
          map["id"],
          map["installation"]) is
          (Just(JText(timestamp)),
           Just(JText(message)),
           Just(JText(category)),
           Just(JText(id)),
           Just(JText(installation))) {
        return Just(Note(timestamp, message, category, id, installation))
      }
    }
    return Nothing
  }
}
